#include <cstdlib>
#include <fstream>
#include <sstream>
#include <string>

using namespace std;

#define MakeVector(x, y, z, v) (v)[0]=(x),(v)[1]=(y),(v)[2]=(z)
#define VecNegate(a)	(a)[0]=(-(a)[0]); (a)[1]=(-(a)[1]); (a)[2]=(-(a)[2]);
#define VecDot(a,b)	((a)[0]*(b)[0]+(a)[1]*(b)[1]+(a)[2]*(b)[2])
#define VecLen(a)	((a)[0]*(a)[0]+(a)[1]*(a)[1]+(a)[2]*(a)[2])
#define VecLenSq(a)	sqrtf((a)[0]*(a)[0]+(a)[1]*(a)[1]+(a)[2]*(a)[2])
#define VecCopy(a,b)	(b)[0]=(a)[0];(b)[1]=(a)[1];(b)[2]=(a)[2];
#define VecAdd(a,b,c) (c)[0]=(a)[0]+(b)[0]; (c)[1]=(a)[1]+(b)[1]; (c)[2]=(a)[2]+(b)[2]
#define VecSub(a,b,c) (c)[0]=(a)[0]-(b)[0]; (c)[1]=(a)[1]-(b)[1]; (c)[2]=(a)[2]-(b)[2]
#define VecS(A,a,b) (b)[0]=(A)*(a)[0]; (b)[1]=(A)*(a)[1]; (b)[2]=(A)*(a)[2]
#define VecAddS(A,a,b,c) (c)[0]=(A)*(a)[0]+(b)[0]; (c)[1]=(A)*(a)[1]+(b)[1]; (c)[2]=(A)*(a)[2]+(b)[2]
#define VecCross(a,b,c) (c)[0]=(a)[1]*(b)[2]-(a)[2]*(b)[1]; (c)[1]=(a)[2]*(b)[0]-(a)[0]*(b)[2]; (c)[2]=(a)[0]*(b)[1]-(a)[1]*(b)[0]
#define VecZero(v) (v)[0]=0.0;(v)[1]=0.0;v[2]=0.0
#define ABS(a) (((a)<0)?(-(a)):(a))
#define SGN(a) (((a)<0)?(-1):(1))
#define SGND(a) (((a)<0.0)?(-1.0):(1.0))

typedef double Vec[3];
static const Vec zero_vec = {0.0, 0.0, 0.0};
static const Vec empty_vec = {-1.0, -1.0, -1.0};

typedef struct _vec_list
{
	 Vec v;
	 _vec_list * next;
} vec_list;

class object
{
	 protected:
		  Vec pos;
		  int portable;
		  vec_list * head;

	 public:
		  object (const object& r)
		  {
				pos[0] = r.pos[0];
				pos[1] = r.pos[1];
				pos[2] = r.pos[2];
				portable = r.portable;
				head = r.head;
		  }
		  object (const Vec p = zero_vec, const int able = 0, vec_list * vl = 0) // acts as default constructor
		  {
				pos[0] = p[0];
				pos[1] = p[1];
				pos[2] = p[2];
				portable = able;
				if (vl == 0)
				{
					 head = initNode();
				}
				else
				{
					 head = vl;
				}
		  }
		  ~object()
		  {
				pos[0] = empty_vec[0];
				pos[1] = empty_vec[1];
				pos[2] = empty_vec[2];
				portable = 0;
				head = initNode();
		  }

		  vec_list * initNode(void)
		  {
				vec_list * n = (vec_list *)malloc(1*sizeof(vec_list));
				n->v[0] = empty_vec[0];
				n->v[1] = empty_vec[1];
				n->v[2] = empty_vec[2];
				n->next = 0;
				return n;
		  }

		  // accessors
		  double * getPos (void)
		  {
				return pos;
		  }
		  int isPortalable (void)
		  {
				return portable;
		  }
		  int getPortable (void)
		  {
				return portable;
		  }
		  vec_list * getHead (void)
		  {
				return head;
		  }
		  double * getVert (int i = 0)
		  {
				if (i == 0)
					 return head->v;
				vec_list *t = head;
				while (i > 0)
				{
					 t = t->next;
					 if (t == 0)
						  return 0;
				}
				return t->v;
		  }
		  vec_list * getLastVert (void)
		  {
				vec_list *t = head;
				while (t->next != 0)
				{
					 t = t->next;
				}
				return t;
		  }

		  string toString(void)
		  {
				ostringstream oss;
				oss << "Object pos: (" << pos[0] << ", " << pos[1] << ", " << pos[2] << ")" << endl;
				oss << "Object portalable? ";
				if (isPortalable())
					 oss << "True\n";
				else
					 oss << "False\n";
				oss << "Object Veriticies:\n";
				vec_list * t = head;
				while (t != 0)
				{
					 oss << "\t(" << t->v[0] << ", " << t->v[1] << ", " << t->v[2] << ")\n";
					 t = t->next;
				}
				oss << endl;
				return oss.str();
		  }

		  // mutators
		  void setPos (const Vec &p)
		  {
				pos[0] = p[0];
				pos[1] = p[1];
				pos[2] = p[2];
		  }
		  void setPos (const int p[3])
		  {
				pos[0] = p[0];
				pos[1] = p[1];
				pos[2] = p[2];
		  }
		  void setPos (const int &x = 0, const int &y = 0, const int &z = 0)
		  {
				pos[0] = x;
				pos[1] = y;
				pos[2] = z;
		  }

		  void setPortable (const int &p = 0)
		  {
				portable = p;
		  }
		  void setPortalable (const int &p = 0)
		  {
				portable = p;
		  }

		  void setHead (const vec_list * p = 0)
		  {
				if (p == 0)
					 return;
				head = (vec_list *)p;
		  }

		  void addVec (const Vec p)
		  {
				if (p == 0)
					 return;
				if (head->v == empty_vec) // no verticies added yet (heads is empty)
				{
					 head->v[0] = p[0];
					 head->v[1] = p[1];
					 head->v[2] = p[2];
					 return;
				}
				vec_list * n = (vec_list *)malloc(1*sizeof(vec_list));
				n->v[0] = p[0];
				n->v[1] = p[1];
				n->v[2] = p[2];
				//				n->next = head; // head insertion
				getLastVert()->next = n; // tail insertion
				n->next = 0;
				return;
		  }
};
